{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AutoScaling Group of Docker & CodeDeploy powered instances behind an Application Load Balancer (ALB)",
  "Parameters": {
    "InstanceType" : {
      "Description" : "Type of EC2 instance in the cluster",
      "Type": "String",
      "Default": "t2.nano"
    },
    "CustomImageId": {
      "Description": "(Optional) Custom image ID for EC2 instance",
      "Type": "String",
      "AllowedPattern": "(|ami-[a-z0-9]+)",
      "ConstraintDescription": "must be ID of AMI (ami-xxxxxxxx) or empty for default AMI for current region",
      "Default": ""
    },
    "MinSize": {
      "Description": "Minimum size of AutoScaling Group",
      "Type": "String",
      "Default": 1
    },
    "MaxSize": {
      "Description": "Maximum size of AutoScaling Group",
      "Type": "String",
      "Default": 4
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair"
    },
    "SSHSecurityGroupId": {
      "Description": "(Optional) ID of ingress security group to allow SSH access to EC2 instances",
      "Type": "AWS::EC2::SecurityGroup::Id",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "must be ID of security group (sg-xxxxxxxx) or empty for 0.0.0.0/0",
      "Default": ""
    },
    "Ingress8080SecurityGroupId": {
      "Description": "(Optional) ID of ingress security group to allow access to port 8080 of EC2 instances",
      "Type": "String",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "must be ID of security group (sg-xxxxxxxx) or empty for no access other than from ELB",
      "Default": ""
    },
    "ExposeCustomPortRange": {
      "Description": "Expose custom port range to entire VPC (from 33000 to 33100)",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "InstanceSecurityGroups": {
      "Description": "Additional SecurityGroups for EC2 instances",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "DockerVersion": {
      "Description": "Version of Docker, i.e. '19.03.6ce'",
      "Type": "String"
    },
    "DockerComposeVersion": {
      "Description": "Version of Docker Compose, i.e. '1.25.5'",
      "Type": "String"
    },
    "AWSCLIVersion": {
      "Description": "Version of AWS CLI tools",
      "Type": "String",
      "Default": "1.18.210"
    },
    "ManagedPolicyArns": {
      "Description": "List of IAM policy names that will be granted to the instance role",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "CreateELB": {
      "Description": "Create ELB and associate with this AutoScaling Group",
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true (default) or false"
    },
    "InternalELB": {
      "Description": "Whether the created Load Balancer should only be available internally within the VPC or public",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "VpcId" : {
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "Type" : "AWS::EC2::VPC::Id",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "SubnetIds" : {
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected VPC."
    },
    "MultiAZ": {
      "Description": "Create EC2 instances in different availability zones",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true (default) or false"
    },
    "AZIndex": {
      "Description": "Zero-based index of availability zone for non-MultiAZ cluster",
      "Type": "Number",
      "Default": "0"
    },
    "ELBReferenceSecurityPolicy": {
      "Description": "Name of Reference-Security-Policy to apply to the ELB, http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-policy-table.html",
      "Type": "String",
      "Default": "ELBSecurityPolicy-2016-08"
    },
    "SSLCertificateId": {
      "Description": "ARN of the default SSL Certificate for the ALB HTTPS listener; for the additional ones use SSLCertificateId2, SSLCertificateId3, ...",
      "Type": "String",
      "Default": ""
    },
    "SSLCertificateId2": {
      "Description": "ARN of the second SSL Certificate for the default ALB HTTPS listener",
      "Type": "String",
      "Default": ""
    },
    "SSLCertificateId3": {
      "Description": "ARN of the third SSL Certificate for the default ALB HTTPS listener",
      "Type": "String",
      "Default": ""
    },
    "HealthCheckPath": {
      "Description": "The destination for health checks on the Application Load Balancer targets",
      "Type": "String",
      "Default": "/"
    },
    "HealthCheckType": {
      "Description": "The service to use for the health checks of ASG instances",
      "Type": "String",
      "Default": "EC2",
      "AllowedValues": ["EC2", "ELB"],
      "ConstraintDescription": "EC2 (default) or ELB"
    },
    "HealthCheckGracePeriod": {
      "Description": "The amount of time, in seconds, that ASG waits before checking the health status of an EC2 instance that has come into service",
      "Type": "Number",
      "Default": "300"
    },
    "HealthCheckIntervalSeconds" : {
      "Description": "The approximate amount of time, in seconds, between health checks of an individual target",
      "Type": "Number",
      "Default": "10"
    },
    "HealthCheckTimeoutSeconds" : {
      "Description": "The amount of time, in seconds, during which no response from a target means a failed health check",
      "Type": "Number",
      "Default": "5"
    },
    "HealthyThresholdCount" : {
      "Description": "The number of consecutive health checks successes required before considering an unhealthy target healthy",
      "Type": "Number",
      "Default": "2"
    },
    "UnhealthyThresholdCount" : {
      "Description": "The number of consecutive health check failures required before considering a target unhealthy",
      "Type": "Number",
      "Default": "5"
    },
    "UseCookieStickinessPolicy": {
      "Description": "Enable ELB sticky sessions based on cookies",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "LoadBalancerDeregistrationDelay": {
      "Description": "The amount of time, in seconds, for Elastic Load Balancing to wait before changing the state of a deregistering target from 'draining' to 'unused'",
      "Type": "Number",
      "Default": "60"
    },
    "EnableELBAccessLogging": {
      "Description": "Write ELB access logs to S3LoggingBucket",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "TerminationPolicies": {
      "Description": "A policy or a list of policies that are used to select the instances to terminate",
      "Type": "CommaDelimitedList",
      "Default": "Default",
      "ConstraintDescription": "See https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html"
    },
    "AlarmActions": {
      "Description": "List of actions that will receive updates on alarms from this stack",
      "Type": "CommaDelimitedList",
      "Default": "",
      "ConstraintDescription": "See https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html for reference"
    },
    "ELBHealthyHostCountAlarmEnabled": {
      "Description": "Create CloudWatch alarm for the healthy host count ELB metric",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "ELBSecurityGroups": {
      "Description": "Additional SecurityGroups for ELB",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "GracefulShutdownEnabled": {
      "Description": "Call graceful shutdown of application when ASG scales down",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "GracefulShutdownTimeout": {
      "Description": "Timeout in seconds of waiting till instance confirms it has shut down. When passed termination of the instance will be abandonded",
      "Type": "Number",
      "Default": "600"
    },
    "DiskMetrics": {
      "Description": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/metrics-collected-by-CloudWatch-agent.html#linux-metrics-enabled-by-CloudWatch-agent",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "DiskMetricsCollectionInterval": {
      "Description": "Disk metrics collection interval in seconds",
      "Type": "Number",
      "Default": "3600"
    },
    "DiskUsedPercentAlarmEnabled": {
      "Description": "Create CloudWatch alarm for the maximum disk used percent metric",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "DiskUsedPercentAlarmThreshold": {
      "Description": "Threshold for the disk used in percents, value equals to or above the threshold triggers an alarm",
      "Type": "Number",
      "Default": "85"
    },
    "MemoryMetrics": {
      "Description": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/metrics-collected-by-CloudWatch-agent.html#linux-metrics-enabled-by-CloudWatch-agent",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "MemoryMetricsCollectionInterval": {
      "Description": "Memory metrics collection interval in seconds",
      "Type": "Number",
      "Default": "300"
    },
    "SwapMetrics": {
      "Description": "https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/metrics-collected-by-CloudWatch-agent.html#linux-metrics-enabled-by-CloudWatch-agent",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "SwapMetricsCollectionInterval": {
      "Description": "Swap metrics collection interval in seconds",
      "Type": "Number",
      "Default": "300"
    },
    "VolumeSize": {
      "Description": "Instance volume size (in GB), 0 means AWS default",
      "Type": "Number",
      "Default": "0"
    },
    "CognitoAuthUserPoolArn": {
      "Description": "The Id of the Amazon Cognito user pool",
      "Type": "String",
      "Default": ""
    },
    "CognitoAuthUserPoolClientId": {
      "Description": "The ARN of the Amazon Cognito user pool client",
      "Type": "String",
      "Default": ""
    },
    "CognitoAuthUserPoolDomain": {
      "Description": "The domain prefix or fully-qualified domain name of the Amazon Cognito user pool",
      "Type": "String",
      "Default": ""
    },
    "CognitoAuthRequiredPathPatterns": {
      "Description": "The comma-delimited list of path patterns Cognito Auth is required for",
      "Type": "CommaDelimitedList",
      "Default": ""
    },
    "CognitoAuthBypassPathPatterns": {
      "Description": "The comma-delimited list of path patterns Cognito Auth should be bypassed. To by used then Cognito auth is required by default, but some content, e.g. health-checks or static resources should be excluded",
      "Type": "CommaDelimitedList",
      "Default": ""
    }
  },
  "Conditions": {
    "CreateAlarmForELBHealthyHostCount": {
      "Fn::Equals": [{ "Ref": "ELBHealthyHostCountAlarmEnabled" }, "true"]
    },
    "CreateAlarmForDiskUsedPercent": {
      "Fn::Equals": [{ "Ref": "DiskUsedPercentAlarmEnabled" }, "true"]
    },
    "CollectDiskMetrics": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "DiskMetrics" }] }, ""]
      }]
    },
    "CreateGracefulShutdown":  {
      "Fn::Equals": [{ "Ref": "GracefulShutdownEnabled" }, "true"]
    },
    "CollectMemoryMetrics": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "MemoryMetrics" }] }, ""]
      }]
    },
    "CollectSwapMetrics": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "SwapMetrics" }] }, ""]
      }]
    },
    "AnyMetricsBeforeSwap": {
      "Fn::Or": [
        { "Condition": "CollectDiskMetrics" },
        { "Condition": "CollectMemoryMetrics" }
      ]
    },
    "AnyMetricsCollected": {
      "Fn::Or": [
        { "Condition": "CollectDiskMetrics" },
        { "Condition": "CollectMemoryMetrics" },
        { "Condition": "CollectSwapMetrics" }
      ]
    },
    "CreateELB": {
      "Fn::Equals": [{ "Ref": "CreateELB" }, "true"]
    },
    "EnableELBAccessLogging": {
      "Fn::And": [
        { "Fn::Equals": [{ "Ref": "EnableELBAccessLogging" }, "true"] },
        { "Condition": "CreateELB" }
      ]
    },
    "InternalELB": {
      "Fn::Equals": [{ "Ref": "InternalELB" }, "true"]
    },
    "MultiAZ": {
      "Fn::Equals": [{ "Ref": "MultiAZ" }, "true"]
    },
    "UseCookieStickinessPolicy": {
      "Fn::Equals": [{ "Ref": "UseCookieStickinessPolicy" }, "true"]
    },
    "SSHSecurityGroupIdEmpty": {
      "Fn::Equals": [{ "Ref": "SSHSecurityGroupId" }, ""]
    },
    "Ingress8080SecurityGroupIdEmpty": {
      "Fn::Equals": [{ "Ref":  "Ingress8080SecurityGroupId" }, ""]
    },
    "UseManagedPolicyArns": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "ManagedPolicyArns" }] }, ""]
      }]
    },
    "EnableCustomPortRange": {
      "Fn::Equals": [{ "Ref": "ExposeCustomPortRange" }, "true"]
    },
    "CustomImageIdEmpty": {
      "Fn::Equals": [{ "Ref": "CustomImageId" }, ""]
    },
    "InstanceSecurityGroupsEmpty": {
      "Fn::Equals": [ { "Fn::Join": [",", { "Ref": "InstanceSecurityGroups" }] }, ""]
    },
    "ELBSecurityGroupsEmpty": {
      "Fn::Equals": [ { "Fn::Join": [",", { "Ref": "ELBSecurityGroups" }] }, ""]
    },
    "VolumeSizeDefined": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Ref": "VolumeSize" }, "0"]
      }]
    },
    "CreateHTTPSListener": {
      "Fn::And": [
        { "Condition": "CreateELB" },
        {
          "Fn::Not": [{
            "Fn::Equals": [{ "Ref": "SSLCertificateId" }, ""]
          }]
        }
      ]
    },
    "CreateListenerCertificate2": {
      "Fn::And": [
        { "Condition": "CreateHTTPSListener" },
        {
          "Fn::Not": [{
            "Fn::Equals": [{ "Ref": "SSLCertificateId2" }, ""]
          }]
        }
      ]
    },
    "CreateListenerCertificate3": {
      "Fn::And": [
        { "Condition": "CreateHTTPSListener" },
        {
          "Fn::Not": [{
            "Fn::Equals": [{ "Ref": "SSLCertificateId3" }, ""]
          }]
        }
      ]
    },
    "CreateListenerRuleCognitoAuthRequired": {
      "Fn::And": [
        { "Condition": "CreateHTTPSListener" },
        {
          "Fn::Not": [{
            "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "CognitoAuthRequiredPathPatterns" }] }, ""]
          }]
        }
      ]
    },
    "CreateListenerRuleCognitoAuthBypass": {
      "Fn::And": [
        { "Condition": "CreateHTTPSListener" },
        { "Condition": "CreateListenerRuleCognitoAuthRequired" },
        {
          "Fn::Not": [{
            "Fn::Equals": [{ "Fn::Join": ["", { "Ref": "CognitoAuthBypassPathPatterns" }] }, ""]
          }]
        }
      ]
    }
  },
  "Mappings": {
    "RegionMap": {
      "eu-central-1": { "AMI": "ami-05d403b512bf100eb", "ELBAccountId": "054676820928" },
      "eu-west-1": { "AMI": "ami-06cd7f9c4486344a5", "ELBAccountId": "156460612806" },
      "eu-west-2": { "AMI": "ami-01ac84be28584498d", "ELBAccountId": "652711504416" }
    }
  },
  "Resources": {
    "MyTerminateNotificationQueue" : {
      "Type": "AWS::SQS::Queue",
      "DependsOn": ["AutoScalingServiceRole", "AutoScalingServiceRolePolicies"],
      "Condition": "CreateGracefulShutdown",
      "Properties" : {
        "VisibilityTimeout" : 0
      }
    },
    "AutoScalingServiceRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "CreateGracefulShutdown",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Sid": "1",
            "Effect": "Allow",
            "Principal": {
              "Service": [
                { "Fn::Join": [".", ["autoscaling", "amazonaws.com"]] }
              ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Path": "/"
      }
    },
    "AutoScalingServiceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Condition": "CreateGracefulShutdown",
      "Properties": {
        "PolicyName": "SendAutoScalingNotification",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Resource": "*",
            "Action": [
              "sqs:SendMessage",
              "sqs:GetQueueUrl"
            ]
          }]
        },
        "Roles": [{
          "Ref": "AutoScalingServiceRole"
        }]
      }
    },
    "MyASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::If": [
            "MultiAZ",
            { "Fn::GetAZs": "" },
            [{ "Fn::Select": [{ "Ref": "AZIndex" }, { "Fn::GetAZs": "" }] }]
          ]
        },
        "LaunchConfigurationName": { "Ref": "MyInstanceLaunchConfig" },
        "HealthCheckGracePeriod": { "Ref": "HealthCheckGracePeriod" },
        "HealthCheckType": { "Ref": "HealthCheckType" },
        "TerminationPolicies": { "Ref": "TerminationPolicies" },
        "MinSize": { "Ref": "MinSize" },
        "MaxSize": { "Ref": "MaxSize" },
        "TargetGroupARNs": [{
          "Fn::If": [
            "CreateELB",
            { "Ref": "MyALBTargetGroup" },
            { "Ref": "AWS::NoValue" }
          ]
        }],
        "LifecycleHookSpecificationList": {
          "Fn::If": [
            "CreateGracefulShutdown",
            [
              {
                "DefaultResult": "ABANDON",
                "HeartbeatTimeout": { "Ref": "GracefulShutdownTimeout" },
                "LifecycleHookName": "MyASG-Termination-Hook",
                "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
                "NotificationTargetARN" : { "Fn::GetAtt" : ["MyTerminateNotificationQueue", "Arn"] },
                "RoleARN" : { "Fn::GetAtt" : ["AutoScalingServiceRole", "Arn"] }
              }
            ],
            []
          ]
        }
      },
      "CreationPolicy": {
        "AutoScalingCreationPolicy" : {
          "MinSuccessfulInstancesPercent" : 100
        },
        "ResourceSignal": {
          "Count": { "Ref": "MinSize" },
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true",
          "SuspendProcesses": [ "HealthCheck", "ReplaceUnhealthy", "AZRebalance", "AlarmNotification", "ScheduledActions" ]
        }
      }
    },
    "MyALBTargetGroup": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Condition": "CreateELB",
      "Properties" : {
        "Name": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-TG"] ] },
        "Protocol": "HTTP",
        "Port": 8080,
        "VpcId": { "Ref": "VpcId" },
        "HealthCheckEnabled": true,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckPort": "8080",
        "HealthCheckPath": { "Ref": "HealthCheckPath" },
        "HealthCheckIntervalSeconds" : { "Ref": "HealthCheckIntervalSeconds" },
        "HealthCheckTimeoutSeconds" : { "Ref":  "HealthCheckTimeoutSeconds" },
        "HealthyThresholdCount" : { "Ref": "HealthyThresholdCount" },
        "UnhealthyThresholdCount" : { "Ref": "UnhealthyThresholdCount" },
        "TargetGroupAttributes" : [
          { "Key": "stickiness.enabled", "Value" : { "Ref": "UseCookieStickinessPolicy" } },
          { "Key": "stickiness.type", "Value": "lb_cookie" },
          { "Key": "stickiness.lb_cookie.duration_seconds", "Value": "10" },
          { "Key": "deregistration_delay.timeout_seconds", "Value": { "Ref": "LoadBalancerDeregistrationDelay" } }
        ]
      }
    },
    "MyALB" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Condition": "CreateELB",
      "Properties" : {
        "Name": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-ALB"] ] },
        "LoadBalancerAttributes": {
          "Fn::If": ["EnableELBAccessLogging",
            [
              { "Key": "access_logs.s3.enabled", "Value":  { "Ref": "EnableELBAccessLogging" }},
              { "Key": "access_logs.s3.bucket", "Value":  {
                "Fn::Join": ["-", [{ "Ref": "AWS::AccountId"}, { "Ref": "AWS::StackName" }]]
              }},
              { "Key": "access_logs.s3.prefix", "Value": "ELBLogs" }
            ],
            []
          ]
        },
        "Scheme": {
          "Fn::If": ["InternalELB", "internal", { "Ref": "AWS::NoValue" }]
        },
        "SecurityGroups": { "Fn::Split": [",",
          { "Fn::Join": [ ",", [
            { "Fn::GetAtt": ["MyALBSecurityGroup", "GroupId"] },
            { "Fn::If": [
              "ELBSecurityGroupsEmpty",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [",", { "Ref": "ELBSecurityGroups" }] }
            ]}
          ]]}
        ]},
        "Subnets": { "Ref": "SubnetIds" }
      }
    },
    "MyALBListenerHTTP" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Condition": "CreateELB",
      "Properties": {
        "DefaultActions": [{
          "Type" : "forward",
          "TargetGroupArn": { "Ref": "MyALBTargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "MyALB" },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "MyALBListenerHTTPS" : {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Condition": "CreateHTTPSListener",
      "Properties": {
        "DefaultActions": [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "MyALBTargetGroup" }
        }],
        "LoadBalancerArn": { "Ref": "MyALB" },
        "Port": "443",
        "Protocol": "HTTPS",
        "Certificates": [
          { "CertificateArn": { "Ref": "SSLCertificateId" } }
        ],
        "SslPolicy": { "Ref": "ELBReferenceSecurityPolicy" }
      }
    },
    "MyALBListenerHTTPSRuleCognitoAuthBypass": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Condition": "CreateListenerRuleCognitoAuthBypass",
      "Properties": {
        "Actions" : [{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "MyALBTargetGroup" }
        }],
        "Conditions" : [{
          "Field": "path-pattern",
          "PathPatternConfig": {
            "Values": { "Ref": "CognitoAuthBypassPathPatterns" }
          }
        }],
        "ListenerArn" : { "Fn::GetAtt" : ["MyALBListenerHTTPS", "ListenerArn"] },
        "Priority" : 100
      }
    },
    "MyALBListenerHTTPSRuleCognitoAuthRequired": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Condition": "CreateListenerRuleCognitoAuthRequired",
      "Properties": {
        "Actions" : [{
          "Type": "authenticate-cognito",
          "AuthenticateCognitoConfig": {
            "UserPoolArn": { "Ref": "CognitoAuthUserPoolArn" },
            "UserPoolClientId": { "Ref": "CognitoAuthUserPoolClientId" },
            "UserPoolDomain": { "Ref": "CognitoAuthUserPoolDomain" },
            "SessionCookieName": "AWSELBAuthSessionCookie",
            "Scope": "openid",
            "SessionTimeout": 604800,
            "OnUnauthenticatedRequest": "authenticate"
          },
          "Order": 1
        },{
          "Type": "forward",
          "TargetGroupArn": { "Ref": "MyALBTargetGroup" },
          "Order": 2
        }],
        "Conditions" : [{
          "Field": "path-pattern",
          "PathPatternConfig": {
            "Values": { "Ref": "CognitoAuthRequiredPathPatterns" }
          }
        }],
        "ListenerArn" : { "Fn::GetAtt" : ["MyALBListenerHTTPS", "ListenerArn"] },
        "Priority" : 200
      }
    },
    "MyALBListenerHTTPSCertificate2": {
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerCertificate",
      "Condition": "CreateListenerCertificate2",
      "Properties" : {
        "Certificates" : [
          { "CertificateArn": { "Ref": "SSLCertificateId2" } }
        ],
        "ListenerArn" : { "Fn::GetAtt" : ["MyALBListenerHTTPS", "ListenerArn"] }
      }
    },
    "MyALBListenerHTTPSCertificate3": {
      "Type" : "AWS::ElasticLoadBalancingV2::ListenerCertificate",
      "Condition": "CreateListenerCertificate3",
      "Properties" : {
        "Certificates" : [
          { "CertificateArn": { "Ref": "SSLCertificateId3" } }
        ],
        "ListenerArn" : { "Fn::GetAtt" : ["MyALBListenerHTTPS", "ListenerArn"] }
      }
    },
    "MyALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP & HTTPS to ELB",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": {
            "Fn::If": ["InternalELB", "172.16.0.0/12", "0.0.0.0/0"]
          }
        }, {
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": {
            "Fn::If": ["InternalELB", "172.16.0.0/12", "0.0.0.0/0"]
          }
        }]
      }
    },
    "MyS3LoggingBucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "EnableELBAccessLogging",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "BucketName": {
          "Fn::Join": ["-", [{ "Ref": "AWS::AccountId"}, { "Ref": "AWS::StackName" }]]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "AccessControl": "LogDeliveryWrite"
      }
    },
    "MyS3LoggingBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Condition": "EnableELBAccessLogging",
      "Properties": {
        "Bucket": {
          "Fn::Join": ["-", [{ "Ref": "AWS::AccountId"}, { "Ref": "AWS::StackName" }]]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Sid": "ELBAccessLogs20130930",
            "Effect": "Allow",
            "Resource": {
              "Fn::Join": ["",
                [
                  "arn:aws:s3:::",
                  { "Fn::Join": ["-", [{ "Ref": "AWS::AccountId"}, { "Ref": "AWS::StackName" }]] },
                  "/",
                  "ELBLogs",
                  "/AWSLogs/",
                  { "Ref": "AWS::AccountId" },
                  "/*"
                ]
              ]
            },
            "Principal": { "AWS": {
              "Fn::FindInMap": ["RegionMap", { "Ref": "AWS::Region" }, "ELBAccountId"]
            }},
            "Action": [
              "s3:PutObject"
            ]
          } ]
        }
      }
    },
    "MyInstanceLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets" : {
            "default": [
              "yum-versionlock",
              "cfn-config",
              "cloudwatch-agent",
              "install-pip",
              "aws-cli",
              "aws-configure",
              "before-docker",
              "docker",
              "codedeploy-agent",
              "disable-services",
              { "Fn::If": ["CreateGracefulShutdown", "asg-terminate-listener", { "Ref": "AWS::NoValue" }] }
            ]
          },
          "yum-versionlock": {
            "packages": {
              "yum": {
                "yum-plugin-versionlock": []
              }
            }
          },
          "cfn-config": {
            "files": {
              "/opt/satago/cfn-error": {
                "content": {
                  "Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" ",
                    " --stack ", { "Ref" : "AWS::StackName" },
                    " --resource MyASG ",
                    " --region ", { "Ref" : "AWS::Region" }
                  ]]
                },
                "mode": "000555",
                "owner": "root",
                "group": "root"
              },
              "/opt/satago/cfn-success": {
                "content": {
                  "Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "if [[ $1 == '--soft' ]]; then set +e; shift; fi\n",
                    "/opt/aws/bin/cfn-signal -e 0 -r \"$1\" ",
                    "  --stack ", { "Ref" : "AWS::StackName" },
                    "  --resource MyASG ",
                    "  --region ", { "Ref" : "AWS::Region" }, "\n",
                    "exit 0\n"
                  ]]
                },
                "mode": "000555",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[main]\n",
                    "stack=", { "Ref": "AWS::StackName" }, "\n",
                    "region=", { "Ref": "AWS::Region" }, "\n",
                    "interval=1\n"
                  ]]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.MyInstanceLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init -s ", { "Ref": "AWS::StackId" },
                    " -r MyInstanceLaunchConfig ", " --region ", { "Ref": "AWS::Region" }, "\n",
                    "runas=root\n"
                  ]]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "cloudwatch-agent": {
            "files": {
              "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json": {
                "content": {
                  "Fn::Join": ["\n", [
                    "{",
                    "  \"agent\": {",
                    "    \"run_as_user\": \"root\"",
                    "  },",
                    "  \"metrics\": {",
                    "    \"append_dimensions\": {",
                    "      \"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",",
                    "      \"InstanceId\": \"${aws:InstanceId}\"",
                    "    },",
                    "    \"aggregation_dimensions\": [[\"AutoScalingGroupName\"]],",
                    "    \"metrics_collected\": {",
                    {
                      "Fn::If": [
                        "CollectDiskMetrics",
                        { "Fn::Join": ["\n", [
                          "      \"disk\": {",
                          "        \"measurement\": [", {
                                     "Fn::Join": ["", [
                                       "\"",
                                       { "Fn::Join": ["\",\"", { "Ref": "DiskMetrics" } ] },
                                       "\""
                                      ]]},
                          "        ],",
                          { "Fn::Join": ["", [
                          "        \"metrics_collection_interval\": ",
                                        { "Ref": "DiskMetricsCollectionInterval" }, "," ]] },
                          "        \"resources\": [",
                          "          \"*\"",
                          "        ],",
                          "        \"ignore_file_system_types\": [\"devtmpfs\",\"tmpfs\",\"xfs\"]",
                          "      }"
                        ]]},
                        ""
                      ]
                    },
                    {
                      "Fn::If": [
                        "CollectMemoryMetrics",
                        { "Fn::Join": ["\n", [
                          { "Fn::If": ["CollectDiskMetrics", ",", ""] },
                          "      \"mem\": {",
                          "        \"measurement\": [", {
                                     "Fn::Join": ["", [
                                       "\"",
                                       { "Fn::Join": ["\",\"", { "Ref": "MemoryMetrics" } ] },
                                       "\""
                                     ]]},
                          "        ],",
                          { "Fn::Join": ["", [
                          "        \"metrics_collection_interval\": ",
                                        { "Ref": "MemoryMetricsCollectionInterval" } ]] },
                          "      }"
                        ]]},
                        ""
                      ]
                    },
                    {
                      "Fn::If": [
                        "CollectSwapMetrics",
                        { "Fn::Join": ["\n", [
                          { "Fn::If": ["AnyMetricsBeforeSwap", ",", ""] },
                          "      \"swap\": {",
                          "        \"measurement\": [", {
                                     "Fn::Join": ["", [
                                       "\"",
                                       { "Fn::Join": ["\",\"", { "Ref": "SwapMetrics" } ] },
                                       "\""
                                     ]]},
                          "        ],",
                          { "Fn::Join": ["", [
                          "        \"metrics_collection_interval\": ",
                                        { "Ref": "SwapMetricsCollectionInterval" } ]] },
                          "      }"
                        ]]},
                        ""
                      ]
                    },
                    "    }",
                    "  },",
                    "  \"logs\": {",
                    "     \"force_flush_interval\": 5,",
                    "     \"logs_collected\": {",
                    "        \"files\": {",
                    "           \"collect_list\": [",
                    "             {",
                    "                \"file_path\": \"/var/log/messages\",",
                    "                \"log_group_name\": \"/var/log/messages\",",
                    "                \"log_stream_name\": \"{instance_id}\",",
                    "                \"timestamp_format\": \"%b %d %H:%M:%S\"",
                    "             },",
                    "             {",
                    "                \"file_path\": \"/var/log/aws/codedeploy-agent/codedeploy-agent.log\",",
                    "                \"log_group_name\": \"codedeploy-agent-log\",",
                    "                \"log_stream_name\": \"{instance_id}-codedeploy-agent-log\",",
                    "                \"timestamp_format\": \"%Y-%m-%d %H:%M:%S\"",
                    "             },",
                    "             {",
                    "                \"file_path\": \"/opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log\",",
                    "                \"log_group_name\": \"codedeploy-deployments-log\",",
                    "                \"log_stream_name\": \"{instance_id}-codedeploy-deployments-log\"",
                    "             },",
                    "             {",
                    "                \"file_path\": \"/tmp/codedeploy-agent.update.log\",",
                    "                \"log_group_name\": \"codedeploy-updater-log\",",
                    "                \"log_stream_name\": \"{instance_id}-codedeploy-updater-log\"",
                    "             }",
                    "           ]",
                    "        }",
                    "     }",
                    "  }",
                    "}"
                  ]]
                }
              },
              "/opt/satago/install-cloudwatch-agent": {
                "content": {
                  "Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "# Install CloudWatch Agent to collect disk/memory metrics\n",
                    "yum list installed amazon-cloudwatch-agent \\\n",
                    "    || rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n",
                    { "Fn::If": ["AnyMetricsCollected", "false", "true"]}, " \\\n",
                    "    && /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a stop \\\n",
                    "    && exit 0\n",
                    "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\\n",
                    "    -a fetch-config \\\n",
                    "    -m ec2 \\\n",
                    "    -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \\\n",
                    "    -s\n"
                  ]]
                },
                "mode": "000555",
                "owner": "root",
                "group": "root"
              },
              "/etc/systemd/system/amazon-cloudwatch-agent.service.d/override.conf": {
                "content": {
                  "Fn::Join": ["", [
                    "[Service]\n",
                    "Restart=always\n"
                  ]]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "amazon-cloudwatch-agent": {
                "command": "/opt/satago/install-cloudwatch-agent"
              }
            }
          },
          "install-pip": {
            "commands": {
              "pip": {
                "command": "command -v pip || (curl -O https://bootstrap.pypa.io/pip/2.7/get-pip.py ; python get-pip.py)"
              }
            }
          },
          "aws-cli": {
            "commands": {
              "aws-cli": {
                "command": {
                  "Fn::Join": ["", [
                    "pip install --upgrade awscli==", { "Ref": "AWSCLIVersion" }
                  ]]
                }
              }
            }
          },
          "aws-configure": {
            "commands": {
              "aws-configure": {
                "command": {
                  "Fn::Join": ["", [
                    "echo -e '\n\n", { "Ref": "AWS::Region" }, "\n' | aws configure"
                  ]]
                }
              }
            }
          },
          "before-docker": {
            "commands": {
              "unlock-docker-version": {
                "command": "yum versionlock delete docker || echo No Docker version to unlock"
              }
            }
          },
          "docker": {
            "packages": {
              "yum": {
                "docker": [ { "Ref": "DockerVersion" } ]
              }
            },
            "commands": {
              "lock-docker-version": {
                "command": "yum versionlock docker"
              },
              "docker-compose": {
                "command": {
                  "Fn::Join": ["", [
                    "curl -L https://github.com/docker/compose/releases",
                    "/download/", { "Ref": "DockerComposeVersion" }, "/docker-compose-`uname -s`-`uname -m`",
                    " > /usr/local/bin/docker-compose",
                    " && chmod +x /usr/local/bin/docker-compose"
                  ]]
                }
              }
            },
            "services": {
              "sysvinit": {
                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },
          "codedeploy-agent": {
            "packages": {
              "yum": {
                "wget": [],
                "ruby": []
              }
            },
            "files": {
              "/opt/satago/install-codedeploy-agent": {
                "content": {
                  "Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "# Install the AWS CodeDeploy Agent.\n",
                    "# CodeDeploy Agent must be installed last, as it will trigger revision deployment\n",
                    "# and all prerequisites must already be configured at this point.\n",
                    "cd /home/ec2-user/\n",
                    "aws s3 cp 's3://aws-codedeploy-", { "Ref": "AWS::Region" } ,"/latest/codedeploy-agent.noarch.rpm' .",
                    " || (/opt/satago/cfn-error 'Failed to download AWS CodeDeploy Agent.' && exit 1)\n",
                    "# Check if the package already installed\n",
                    "yum list installed $(rpm -qp ./codedeploy-agent.noarch.rpm) && exit 0\n",
                    "yum -y install codedeploy-agent.noarch.rpm",
                    " || (/opt/satago/cfn-error 'Failed to install AWS CodeDeploy Agent.' && exit 1)\n"
                  ]]
                },
                "mode": "000555",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "install-codedeploy-agent": {
                "command": "/opt/satago/install-codedeploy-agent"
              }
            },
            "services": {
              "sysvinit": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },
          "asg-terminate-listener": {
            "Fn::If": [
              "CreateGracefulShutdown",
              {
                "files" : {
                  "/opt/satago/asg-terminate-listener.py": {
                    "content": {
                      "Fn::Join": ["", [
                        "#!/usr/bin/python\n",
                        "#\n",
                        "\n",
                        "import yaml\n",
                        "import subprocess\n",
                        "import time\n",
                        "import json\n",
                        "import sys\n",
                        "import requests\n",
                        "import os.path\n",
                        "\n",
                        "REGION=sys.argv[1]\n",
                        "QUEUE_URL=sys.argv[2]\n",
                        "\n",
                        "\n",
                        "#find my instance id\n",
                        "myInstanceId=requests.get('http://169.254.169.254/latest/meta-data/instance-id').text\n",
                        "\n",
                        "#wait for terminate message appears in the queue\n",
                        "print 'Waiting for termination message in queue', QUEUE_URL\n",
                        "receivedMessage=None\n",
                        "while not receivedMessage:\n",
                        "    sqsMessagesJson = subprocess.check_output(['aws','sqs', 'receive-message', '--region', REGION, '--queue-url', QUEUE_URL])\n",
                        "    if sqsMessagesJson != '':\n",
                        "        sqsMessages=json.loads(sqsMessagesJson)\n",
                        "        for message in sqsMessages['Messages']:\n",
                        "            message['Body'] = json.loads(message['Body'])\n",
                        "            if 'EC2InstanceId' not in message['Body']:\n",
                        "                # delete garbage\n",
                        "                subprocess.check_output(['aws','sqs', 'delete-message', '--region', REGION, '--queue-url', QUEUE_URL, '--receipt-handle', message['ReceiptHandle']])\n",
                        "            elif message['Body']['EC2InstanceId'] == myInstanceId:\n",
                        "                # delete the message from the queue\n",
                        "                receivedMessage = message\n",
                        "                subprocess.check_output(['aws','sqs', 'delete-message', '--region', REGION, '--queue-url', QUEUE_URL, '--receipt-handle', receivedMessage['ReceiptHandle']])\n",
                        "                break\n",
                        "    if not receivedMessage:\n",
                        "        time.sleep(5)\n",
                        "print 'Received termination message'\n",
                        "\n",
                        "#execute application stop scripts configured in appspec.xml\n",
                        "if os.path.exists('current/appspec.yml'):\n",
                        "   appspec = yaml.safe_load(open('current/appspec.yml', 'r'))\n",
                        "   if 'ApplicationStop' in appspec['hooks']:\n",
                        "       for hook in appspec['hooks']['ApplicationStop']:\n",
                        "           timeout = hook['timeout']\n",
                        "           startTime = time.time()\n",
                        "           print 'Executing', hook['location']\n",
                        "           task = subprocess.Popen(['./'+hook['location']], cwd='current', env={'LIFECYCLE_EVENT':'ApplicationStop'})\n",
                        "           while task.poll() is None:\n",
                        "               if time.time() - startTime > timeout:\n",
                        "                   print 'Time out'\n",
                        "                   break\n",
                        "               time.sleep(1)\n",
                        "\n",
                        "#confirm to access group that scaling down can proceed\n",
                        "print 'Confirming lifecycle action to autoscaling group'\n",
                        "subprocess.check_output(['./asg-confirm-instance-termination.sh'])\n",
                        "\n",
                        "print 'Terminate instance finished'\n"
                      ]]
                    },
                    "mode": "000555",
                    "owner": "root",
                    "group": "root"
                  },
                  "/opt/satago/asg-confirm-instance-termination.sh": {
                    "content": {
                      "Fn::Join": ["", [
                        "#!/bin/bash -ex\n",
                        "# Confirms to ASG that instance termination can continue\n",
                        "# Run this script when of some reasons handling notification from SQS has failed\n",
                        "# and you want to continue with scaling down.\n",
                        "\n",
                        "aws autoscaling complete-lifecycle-action ",
                        "--region ", { "Ref": "AWS::Region" }, " ",
                        "--lifecycle-action-result CONTINUE ",
                        "--lifecycle-hook-name MyASG-Termination-Hook ",
                        "--auto-scaling-group-name MyASG ",
                        "--instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n"
                      ]]
                    },
                    "mode": "000555",
                    "owner": "root",
                    "group": "root"
                  },
                  "/etc/systemd/system/asg-terminate-listener.service": {
                    "content": {
                      "Fn::Join": ["", [
                        "[Unit]\n",
                        "Description=Terminate Instance Listener\n",
                        "After=network.target\n",
                        "\n",
                        "[Service]\n",
                        "Type=simple\n",
                        "Restart=on-failure\n",
                        "RestartSec=15\n",
                        "User=root\n",
                        "WorkingDirectory=/opt/satago\n",
                        "ExecStart=/opt/satago/asg-terminate-listener.py", " ",
                        { "Ref": "AWS::Region" }, " ",
                        { "Ref": "MyTerminateNotificationQueue" }, "\n"
                      ]]
                    },
                    "mode": "000644",
                    "owner": "root",
                    "group": "root"
                  }
                },
                "commands": {
                  "start-asg-terminate-listener.service": {
                    "command": "systemctl start asg-terminate-listener"
                  }
                }
              },
              { "Ref": "AWS::NoValue" }
            ]
          },
          "disable-services": {
            "files": {
              "/opt/satago/disable-services": {
                "content": {
                  "Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "systemctl stop rpcbind.service rpcbind.socket\n",
                    "systemctl disable rpcbind.service rpcbind.socket\n"
                  ]]
                },
                "mode": "000555",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "rpcbind": {
                "command": "/opt/satago/disable-services"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::If": [
              "CustomImageIdEmpty",
              { "Fn::FindInMap": ["RegionMap", { "Ref": "AWS::Region" }, "AMI"] },
              { "Ref": "CustomImageId" }
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "BlockDeviceMappings" : {
          "Fn::If": [
            "VolumeSizeDefined",
            [{
              "DeviceName":"/dev/xvda",
              "Ebs": {
                "VolumeSize": { "Ref": "VolumeSize" },
                "VolumeType":"gp2"
              }
            }],
            []
          ]
        },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": { "Fn::Split": [",",
          { "Fn::Join": [ ",", [
            { "Fn::GetAtt": ["MyInstanceSecurityGroup", "GroupId"] },
            { "Fn::If": [
              "InstanceSecurityGroupsEmpty",
              { "Ref": "AWS::NoValue" },
              { "Fn::Join": [",", { "Ref": "InstanceSecurityGroups" }] }
            ]}
          ]]}
        ]},
        "IamInstanceProfile": { "Ref": "MyInstanceProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": ["", [
              "#!/bin/bash -ex\n",

              "exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1\n",

              "yum update -y\n",

              "/opt/aws/bin/cfn-init --verbose --configsets default",
              " --stack ", { "Ref": "AWS::StackId" },
              " --resource MyInstanceLaunchConfig",
              " --region ", { "Ref": "AWS::Region" },
              " || (/opt/satago/cfn-error 'Failed to run cfn-init.' && exit 1)\n",

              "# Check if ASG has active deployments...\n",
              "set +e\n",
              "APPLICATION_NAME=$(aws deploy list-applications",
              "  --region=", { "Ref": "AWS::Region" },
              "  --query=applications",
              "  | grep -oE '", { "Ref": "AWS::StackName" }, "-MyApplication-[^\"]+')\n",
              "DEPLOYMENT_GROUP=$(aws deploy list-deployment-groups",
              "  --region=", { "Ref": "AWS::Region" },
              "  --application-name=${APPLICATION_NAME}",
              "  --query='deploymentGroups[0]'",
              "  --output=text)\n",
              "SUCCESSFUL_DEPLOYMENT_ID=$(aws deploy list-deployments ",
              "  --region=", { "Ref": "AWS::Region" },
              "  --application-name=${APPLICATION_NAME}",
              "  --deployment-group=${DEPLOYMENT_GROUP}",
              "  --include-only-statuses=Succeeded",
              "  --query='deployments[0]'",
              "  --output=text)\n",
              "set -e\n",

              "if [[ ${SUCCESSFUL_DEPLOYMENT_ID} =~ ^d-.*$ ]]; then\n",
              "  echo Active deployment detected, waiting for successful signal from validate.bash\n",
              "else\n",
              "  echo Could not find any CodeDeploy deployments, signalling success to the ASG now\n",
              "  /opt/satago/cfn-success 'Instance setup completed successfully.'\n",
              "fi\n"
            ]]
          }
        }
      }
    },
    "MyInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SSH, HTTP for Tomcat, Ephemeral port range for Docker",
        "SecurityGroupIngress": [{
          "IpProtocol": "tcp",
          "FromPort": "8080",
          "ToPort": "8080",
          "SourceSecurityGroupId": { "Fn::GetAtt": ["MyALBSecurityGroup", "GroupId"] }
        }, { "Fn::If": [
          "Ingress8080SecurityGroupIdEmpty",
          { "Ref": "AWS::NoValue" },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "Ingress8080SecurityGroupId" }
          }
        ]}, {
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp": {
            "Fn::If": [
              "SSHSecurityGroupIdEmpty",
              "0.0.0.0/0",
              { "Ref": "AWS::NoValue" }
            ]
          },
          "SourceSecurityGroupId": {
            "Fn::If": [
              "SSHSecurityGroupIdEmpty",
              { "Ref": "AWS::NoValue" },
              { "Ref": "SSHSecurityGroupId" }
            ]
          }
        }, {
          "Fn::If": [
            "EnableCustomPortRange",
            {
              "IpProtocol": "tcp",
              "FromPort": "33000",
              "ToPort": "33100",
              "CidrIp": "172.16.0.0/12"
            },
            { "Ref": "AWS::NoValue" }
          ]
        }]
      }
    },
    "MyDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": { "Ref": "MyApplication" },
        "AutoScalingGroups": [{ "Ref": "MyASG" }],
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "DeploymentStyle": {
          "DeploymentOption": "WITH_TRAFFIC_CONTROL",
          "DeploymentType": "IN_PLACE"
        },
        "LoadBalancerInfo": {
          "Fn::If": [
            "CreateELB",
            {
              "TargetGroupInfoList": [
                {
                  "Name": { "Fn::GetAtt": ["MyALBTargetGroup", "TargetGroupName"] }
                }
              ]
            },
            { "Ref": "AWS::NoValue" }
          ]
        },
        "ServiceRoleArn": { "Fn::GetAtt" : ["CodeDeployServiceRole", "Arn"] }
      }
    },
    "MyApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": { }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Sid": "1",
            "Effect": "Allow",
            "Principal": {
              "Service": [
                { "Fn::Join": [".", ["codedeploy", { "Ref": "AWS::Region"}, "amazonaws.com"]] }
              ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Path": "/"
      }
    },
    "CodeDeployServiceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "ec2:Describe*"
            ]
          }, {
            "Effect": "Allow",
            "Resource": [
              "*"
            ],
            "Action": [
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:DeleteLifecycleHook",
              "autoscaling:DescribeLifecycleHooks",
              "autoscaling:DescribeAutoScalingGroups",
              "autoscaling:PutLifecycleHook",
              "autoscaling:RecordLifecycleActionHeartbeat",

              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:RegisterTargets"
            ]
          }]
        },
        "Roles": [{
          "Ref": "CodeDeployServiceRole"
        }]
      }
    },
    "MyInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": {
          "Fn::Split": [",",
            { "Fn::Join": [",", [
              "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
              "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
              "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",
              "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess",
              { "Fn::If": [
                "UseManagedPolicyArns",
                { "Fn::Join": [",", { "Ref": "ManagedPolicyArns" } ] },
                { "Ref": "AWS::NoValue" }
              ]}
            ]]}
          ]
        },
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }]
        },
        "Path": "/"
      }
    },
    "MyInstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "MyInstanceRole",
        "PolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "cloudformation:Describe*",
              "cloudformation:GetTemplate",

              "s3:Get*",
              "s3:List*",

              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
              "logs:DescribeLogGroups",
              "logs:DescribeLogStreams",

              "cloudwatch:PutMetricData",

              "kms:Decrypt",

              "autoscaling:Describe*",
              "autoscaling:CompleteLifecycleAction",
              "autoscaling:EnterStandby",
              "autoscaling:ExitStandby",
              "autoscaling:UpdateAutoScalingGroup",
              "autoscaling:SuspendProcesses",
              "autoscaling:ResumeProcesses",

              "elasticloadbalancing:Describe*",
              "elasticloadbalancing:DeregisterTargets",
              "elasticloadbalancing:RegisterTargets",

              "ec2messages:*",

              "ssm:UpdateInstanceInformation",

              "codedeploy:List*",

              "sqs:SendMessage",
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage"

            ],
            "Resource": "*"
          }]
        },
        "Roles": [{
          "Ref": "MyInstanceRole"
        }]
      }
    },
    "MyInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{
          "Ref": "MyInstanceRole"
        }]
      }
    },
    "MyALBTargetGroupHealthyHostCountAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "CreateAlarmForELBHealthyHostCount",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, " Application ELB Target Group Healthy Host Count"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/ApplicationELB",
        "Dimensions": [
          {
            "Name": "LoadBalancer",
            "Value": { "Fn::GetAtt": ["MyALB", "LoadBalancerFullName"] }
          },
          {
            "Name": "TargetGroup",
            "Value": { "Fn::GetAtt": ["MyALBTargetGroup", "TargetGroupFullName"] }
          }
        ],
        "MetricName": "HealthyHostCount",
        "Unit": "Count",
        "EvaluationPeriods": 1,
        "Period": 60,
        "Statistic": "Minimum",
        "Threshold": 1,
        "ComparisonOperator": "LessThanThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDiskUsedPercentAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "CreateAlarmForDiskUsedPercent",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, " Disk Used Percent"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "CWAgent",
        "Dimensions": [{
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "MyASG" }
        }],
        "MetricName": "disk_used_percent",
        "Unit": "Percent",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "DiskMetricsCollectionInterval" },
        "Statistic": "Maximum",
        "Threshold": { "Ref": "DiskUsedPercentAlarmThreshold" },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    }
  },
  "Outputs": {
    "ApplicationURL": {
      "Description": "Application URL",
      "Value": {
        "Fn::Join": ["", [
          "http://",
          { "Fn::GetAtt": ["MyALB", "DNSName"] }
        ]]
      },
      "Export" : {
        "Name" : {
          "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "ApplicationURL" ] ]
        }
      },
      "Condition": "CreateELB"
    }
  }
}
