{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "PostgreSQL on RDS",
  "Parameters": {
    "VpcId" : {
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "Type" : "AWS::EC2::VPC::Id",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "VpcIdIsDefault": {
      "Description": "Added for backwards compatibility with databases created before version 0.9.0 to avoid recreation of security groups created in default VPC. Set to 'true' if VpcId parameter value is referencing the default VPC of AWS account",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "Ephemeral": {
      "Description": "Whether the DB instance can safely be removed or replaced, i.e. if it's a test instance",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "true or false (default)"
    },
    "DBInstanceIdentifier": {
      "Description": "A name for the DB instance. AWS CloudFormation converts it to lowercase.",
      "Type": "String"
    },
    "DBSnapshotIdentifier": {
      "Description": "The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance.",
      "Type": "String",
      "Default": ""
    },
    "DBSubnetGroupName": {
      "Type": "String",
      "Default": "default"
    },
    "DBName": {
      "Description": "The name of the database to create when the DB instance is created.",
      "Type": "String",
      "Default": ""
    },
    "MasterUsername": {
      "Description": "The master user name for the DB instance.",
      "Type": "String",
      "Default": ""
    },
    "MasterUserPassword": {
      "Description": "The password for the master user. The password can include any printable ASCII character except \"/\", \"\"\", or \"@\".",
      "Type": "String",
      "Default": ""
    },
    "EngineVersion": {
      "Description": "aws rds describe-db-engine-versions --query \"DBEngineVersions[?Engine=='postgres'].EngineVersion\"",
      "Type": "String",
      "Default": ""
    },
    "DBInstanceClass": {
      "Description": "The compute and memory capacity of the DB instance.",
      "Type": "String"
    },
    "AllocatedStorage": {
      "Description": "The amount of storage in gibibytes (GiB) to be initially allocated for the database instance.",
      "Type": "Number"
    },
    "MaxAllocatedStorage": {
      "Description": "The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance. Default `0` means no auto-scaling.",
      "Type": "Number",
      "Default": 0
    },
    "StorageType": {
      "Description": "Storage type to be associated with the DB instance. If you specify io1, you must also include a value for the Iops parameter.",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "standard",
        "gp2",
        "io1"
      ],
      "ConstraintDescription": "standard, gp2 (default), io1"
    },
    "Iops": {
      "Description": "The number of I/O operations per second (IOPS) that the database provisions. The value must be equal to or greater than 1000.",
      "Type": "Number",
      "Default": "0"
    },
    "MultiAZ": {
      "Description": "Specifies whether the database instance is a multiple Availability Zone deployment.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "true (default) or false"
    },
    "AZIndex": {
      "Description": "Zero-based index of availability zone for non-MultiAZ cluster",
      "Type": "Number",
      "Default": "-1"
    },
    "DBPubliclyAccessible": {
      "Description": "Indicates whether the DB instance is an internet-facing instance.",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "true or false (default)"
    },
    "DBInstanceIngressSourceSecurityGroupId": {
      "Description": "Allow access to RDS instance from instances associated with the specified security group.",
      "Type": "String",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceIngressSourceSecurityGroupId2": {
      "Description": "Allow access to RDS instance from instances associated with the specified security group.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceIngressSourceSecurityGroupId3": {
      "Description": "Allow access to RDS instance from instances associated with the specified security group.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceIngressSourceSecurityGroupId4": {
      "Description": "Allow access to RDS instance from instances associated with the specified security group.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceIngressSourceSecurityGroupId5": {
      "Description": "Allow access to RDS instance from instances associated with the specified security group.",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceVPCSecurityGroupId2": {
      "Description": "Additional VPC security group to attach to the DB instance",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBInstanceVPCSecurityGroupId3": {
      "Description": "Additional VPC security group to attach to the DB instance",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },
    "DBParameterGroupName": {
      "Description": "Name of parameter group for DB instance",
      "Type": "String",
      "Default": ""
    },

    "CreateReadOnlyReplica": {
      "Description": "Create read replica DB for this instance",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "true or false (default)"
    },

    "DBReplicaInstanceIdentifier": {
      "Description": "A name for the DB replica instance. AWS CloudFormation converts it to lowercase.",
      "Type": "String",
      "Default": ""
    },
    "DBReplicaParameterGroupName": {
      "Description": "Name of parameter group for DB replica instance",
      "Type": "String",
      "Default": ""
    },
    "DBReplicaInstanceClass": {
      "Description": "The compute and memory capacity of the DB instance.",
      "Type": "String",
      "Default": ""
    },
    "DBReplicaAllocatedStorage": {
      "Description": "The aamount of storage in gibibytes (GiB) to be initially allocated for the replica database instance. Default `0` means the same storage as in the source DB.",
      "Type": "Number",
      "Default": 0
    },
    "DBReplicaMaxAllocatedStorage": {
      "Description": "The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the replica DB instance. Default `0` will inherit the settings from the source DB.",
      "Type": "Number",
      "Default": 0
    },
    "DBReplicaStorageType": {
      "Description": "Storage type to be associated with the DB replica instance. If you specify io1, you must also include a value for the DBReplicaIops parameter.",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "standard",
        "gp2",
        "io1"
      ],
      "ConstraintDescription": "standard, gp2 (default), io1"
    },
    "DBReplicaIops": {
      "Description": "The number of I/O operations per second (IOPS) that the replica database provisions. The value must be equal to or greater than 1000.",
      "Type": "Number",
      "Default": "0"
    },
    "DBReplicaPubliclyAccessible": {
      "Description": "Indicates whether the DB replica instance is an internet-facing instance.",
      "Type": "String",
      "Default": "",
      "AllowedValues": [
        "true",
        "false",
        ""
      ],
      "ConstraintDescription": "true, false, or blank (default, to inherit same value as source database instance)"
    },

    "DBReplicaInstanceVPCSecurityGroupId2": {
      "Description": "Additional VPC security group to attach to the DB replica instance",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "(|sg-[a-z0-9]+)",
      "ConstraintDescription": "Security Group Id (sg-xxxxxxxx)"
    },

    "EnhancedMonitoring": {
      "Description": "Enable enhanced monitoring for the DB instance.",
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "ConstraintDescription": "true or false (default)"
    },

    "EnablePerformanceInsights": {
      "Description": "A value that indicates whether to enable Performance Insights for the DB instance.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true (default) or false"
    },

    "AlarmActions": {
      "Description": "List of actions that will receive updates on alarms from this stack",
      "Type": "CommaDelimitedList",
      "Default": "",
      "ConstraintDescription": "See https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html for reference"
    },

    "HighCPUUtilizationAlarmEnabled": {
      "Description": "Create CloudWatch alarm for high CPU utilization on the DB instance",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "HighCPUUtilizationAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "3600"
    },
    "HighCPUUtilizationAlarmThreshold": {
      "Description": "Value of CPU utilization in percents equals to or above the threshold triggers an alarm",
      "Type": "Number",
      "Default": "80"
    },

    "LowCPUCreditBalanceAlarmEnabled": {
      "Description": "Create CloudWatch alarm low CPU credits on the DB instance",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "LowCPUCreditBalanceAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "900"
    },
    "LowCPUCreditBalanceAlarmThreshold": {
      "Description": "Value of CPU credits equals to or below the threshold triggers an alarm",
      "Type": "Number",
      "Default": "50"
    },

    "LowIOBalanceAlarmEnabled": {
      "Description": "Create CloudWatch alarm for low MIN(BurstBalance, EBSIOBalance%, EBSByteBalance%)",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true (default) or false"
    },
    "LowIOBalanceAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "900"
    },
    "LowIOBalanceAlarmThreshold": {
      "Description": "Value of the computed metric lower than or equal to the threshold triggers an alarm",
      "Type": "Number",
      "Default": "50"
    },
    "DBReplicaLowIOBalanceAlarmEnabled": {
      "Description": "Create CloudWatch alarm for low MIN(BurstBalance, EBSIOBalance%, EBSByteBalance%) for replica DB",
      "Type": "String",
      "Default": "",
      "AllowedValues": ["true", "false", ""],
      "ConstraintDescription": "empty string (default), true, or false. Empty strings inherits the value from LowIOBalanceAlarmEnabled"
    },

    "HighReplicaLagAlarmEnabled": {
      "Description": "Create CloudWatch alarm for high replica lag",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true (default) or false"
    },
    "HighReplicaLagAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "300"
    },
    "HighReplicaLagAlarmThreshold": {
      "Description": "Value of the replica lag in seconds equals to or above the threshold triggers an alarm",
      "Type": "Number",
      "Default": "300"
    },

    "LowFreeStorageSpaceAlarmEnabled": {
      "Description": "Create CloudWatch alarm for low free storage space",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "LowFreeStorageSpaceAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "300"
    },
    "LowFreeStorageSpaceAlarmThreshold": {
      "Description": "Value of free storage space in bytes equals to or below the threshold triggers an alarm",
      "Type": "Number",
      "Default": "10000000000"
    },

    "HighDatabaseConnectionsAlarmEnabled": {
      "Description": "Create CloudWatch alarm for high number of database connections",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "HighDatabaseConnectionsAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "60"
    },
    "HighDatabaseConnectionsAlarmThreshold": {
      "Description": "Value of number of database connections equals to or above the threshold triggers an alarm",
      "Type": "Number",
      "Default": "200"
    },

    "LowDatabaseConnectionsAlarmEnabled": {
      "Description": "Create CloudWatch alarm for low number of database connections",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"],
      "ConstraintDescription": "true or false (default)"
    },
    "LowDatabaseConnectionsAlarmPeriod": {
      "Description": "Evaluation period for this alarm in seconds",
      "Type": "Number",
      "Default": "60"
    },
    "LowDatabaseConnectionsAlarmThreshold": {
      "Description": "Value of number of database connections equals to or below the threshold triggers an alarm",
      "Type": "Number",
      "Default": "0"
    },

    "PreferredMaintenanceWindow": {
      "Description": "",
      "Type": "String",
      "Default": "Sun:11:00-Sun:12:00"
    },
    "PreferredBackupWindow": {
      "Description": "",
      "Type": "String",
      "Default": "22:00-22:30"
    },
    "BackupRetentionPeriod": {
      "Description": "",
      "Type": "Number",
      "Default": "7"
    }
  },
  "Conditions": {
    "VpcIdIsDefault": {
      "Fn::Equals": [{ "Ref": "VpcIdIsDefault" }, "true"]
    },
    "DefaultAZIndex": {
      "Fn::Equals": [{ "Ref": "AZIndex" }, "-1"]
    },
    "EnablePerformanceInsights": {
      "Fn::Equals": [{ "Ref": "EnablePerformanceInsights" }, "true"]
    },
    "DBSnapshotIdentifierEmpty": {
      "Fn::Equals": [{ "Ref": "DBSnapshotIdentifier" }, ""]
    },
    "EngineVersionEmpty": {
      "Fn::Equals": [{ "Ref": "EngineVersion" }, ""]
    },
    "HighCPUUtilizationAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "HighCPUUtilizationAlarmEnabled" }, "true"]
    },
    "LowIOBalanceAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "LowIOBalanceAlarmEnabled" }, "true"]
    },
    "ReplicaLowIOBalanceAlarmEnabled": {
      "Fn::And": [
        { "Condition": "CreateReadOnlyReplica" },
        { "Fn::Or": [
          { "Fn::And": [
            { "Fn::Eq": [{ "Ref": "DBReplicaLowIOBalanceAlarmEnabled" }, ""] },
            { "Condition": "LowIOBalanceAlarmEnabled" }
          ]},
          { "Fn::Equals": [{ "Ref": "DBReplicaLowIOBalanceAlarmEnabled" }, "true"] }
        ]}
      ]}
    },
    "LowCPUCreditBalanceAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "LowCPUCreditBalanceAlarmEnabled" }, "true"]
    },
    "ReplicaLowCPUCreditBalanceAlarmEnabled": {
      "Fn::And": [
        { "Condition": "LowCPUCreditBalanceAlarmEnabled" },
        { "Condition": "CreateReadOnlyReplica" }
      ]
    },
    "ReplicaLowFreeStorageSpaceAlarmEnabled": {
      "Fn::And": [
        { "Condition": "LowFreeStorageSpaceAlarmEnabled" },
        { "Condition": "CreateReadOnlyReplica" }
      ]
    },
    "HighReplicaLagAlarmEnabled": {
      "Fn::And": [
        { "Condition": "CreateReadOnlyReplica" },
        { "Fn::Equals": [{ "Ref": "HighReplicaLagAlarmEnabled" }, "true"] }
      ]
    },
    "LowFreeStorageSpaceAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "LowFreeStorageSpaceAlarmEnabled" }, "true"]
    },
    "HighDatabaseConnectionsAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "HighDatabaseConnectionsAlarmEnabled" }, "true"]
    },
    "LowDatabaseConnectionsAlarmEnabled": {
      "Fn::Equals": [{ "Ref": "LowDatabaseConnectionsAlarmEnabled" }, "true"]
    },

    "DBPubliclyAccessibleEnabled": {
      "Fn::Equals": [{ "Ref": "DBPubliclyAccessible" }, "true"]
    },

    "DBReplicaInstanceIdentifierEmpty": {
      "Fn::Equals": [{ "Ref": "DBReplicaInstanceIdentifier" }, ""]
    },
    "DBReplicaInstanceClassEmpty": {
      "Fn::Equals": [{ "Ref": "DBReplicaInstanceClass" }, ""]
    },
    "DBReplicaUseProvisionedIops": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Ref": "DBReplicaIops" }, "0"]
      }]
    },
    "DBReplicaPubliclyAccessibleEmpty": {
      "Fn::Equals": [{ "Ref": "DBReplicaPubliclyAccessible" }, ""]
    },
    "DBReplicaPubliclyAccessibleEnabled": {
      "Fn::Equals": [{ "Ref": "DBReplicaPubliclyAccessible" }, "true"]
    },
    "UseProvisionedIops": {
      "Fn::Not": [{
        "Fn::Equals": [{ "Ref": "Iops" }, "0"]
      }]
    },
    "CreateReadOnlyReplica": {
      "Fn::Equals": [{ "Ref": "CreateReadOnlyReplica" }, "true"]
    },
    "EnhancedMonitoring": {
      "Fn::Equals": [{ "Ref": "EnhancedMonitoring" }, "true"]
    },
    "Ephemeral": {
      "Fn::Equals": [{ "Ref": "Ephemeral" }, "true"]
    },
    "MultiAZ": {
      "Fn::Equals": [{ "Ref": "MultiAZ" }, "true"]
    },

    "DBInstanceVPCSecurityGroupId2Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceVPCSecurityGroupId2" }, ""]
    },
    "DBInstanceVPCSecurityGroupId3Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceVPCSecurityGroupId3" }, ""]
    },
    "DBReplicaInstanceVPCSecurityGroupId2Empty": {
      "Fn::Equals": [{ "Ref": "DBReplicaInstanceVPCSecurityGroupId2" }, ""]
    },

    "DBInstanceIngressSourceSecurityGroupIdEmpty": {
      "Fn::Equals": [{ "Ref": "DBInstanceIngressSourceSecurityGroupId" }, ""]
    },
    "DBInstanceIngressSourceSecurityGroupId2Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceIngressSourceSecurityGroupId2" }, ""]
    },
    "DBInstanceIngressSourceSecurityGroupId3Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceIngressSourceSecurityGroupId3" }, ""]
    },
    "DBInstanceIngressSourceSecurityGroupId4Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceIngressSourceSecurityGroupId4" }, ""]
    },
    "DBInstanceIngressSourceSecurityGroupId5Empty": {
      "Fn::Equals": [{ "Ref": "DBInstanceIngressSourceSecurityGroupId5" }, ""]
    },

    "DBReplicaAllocatedStorageEmpty": {
      "Fn::Equals": [{ "Ref": "DBReplicaAllocatedStorage" }, "0"]
    },
    "MaxAllocatedStorageEmpty": {
      "Fn::Equals": [{ "Ref": "MaxAllocatedStorage" }, "0"]
    },
    "DBReplicaMaxAllocatedStorageEmpty": {
      "Fn::Equals": [{ "Ref": "DBReplicaMaxAllocatedStorage" }, "0"]
    }
  },
  "Resources": {
    "MyDBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Retain",
      "DependsOn": ["MyVPCSecurityGroup"],
      "Properties": {
        "DBInstanceIdentifier": { "Ref": "DBInstanceIdentifier" },
        "DBSnapshotIdentifier": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "AWS::NoValue"},
          { "Ref": "DBSnapshotIdentifier" }
        ]},
        "DBName": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "DBName" },
          { "Ref": "AWS::NoValue"}
        ]},
        "AllowMajorVersionUpgrade": true,
        "AutoMinorVersionUpgrade": false,
        "MultiAZ": { "Ref": "MultiAZ" },
        "AvailabilityZone": { "Fn::If": [
          "MultiAZ",
          { "Ref": "AWS::NoValue" },
          { "Fn::If": [
            "DefaultAZIndex",
            { "Ref": "AWS::NoValue" },
            { "Fn::Select": [{ "Ref": "AZIndex" }, { "Fn::GetAZs": "" }] }
          ]}
        ]},
        "AllocatedStorage": { "Ref": "AllocatedStorage" },
        "MaxAllocatedStorage": { "Fn::If": [
          "MaxAllocatedStorageEmpty",
          { "Ref": "AWS::NoValue"},
          { "Ref": "MaxAllocatedStorage" }
        ]},
        "DeletionProtection": { "Fn::If": [ "Ephemeral", false, true ] },
        "DeleteAutomatedBackups": { "Fn::If": [ "Ephemeral", true, false ] },
        "DBSubnetGroupName": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "DBSubnetGroupName" },
          { "Ref": "AWS::NoValue"}
        ]},
        "DBInstanceClass": { "Ref": "DBInstanceClass" },
        "Engine": "postgres",
        "EngineVersion": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "EngineVersion" },
          { "Fn::If": [
            "EngineVersionEmpty", { "Ref": "AWS::NoValue"}, { "Ref": "EngineVersion" }
          ]}
        ]},
        "MasterUsername": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "MasterUsername" },
          { "Ref": "AWS::NoValue"}
        ]},
        "MasterUserPassword": { "Fn::If": [
          "DBSnapshotIdentifierEmpty",
          { "Ref": "MasterUserPassword" },
          { "Ref": "AWS::NoValue"}
        ]},
        "KmsKeyId": "alias/aws/rds",
        "StorageEncrypted": true,
        "StorageType": { "Ref": "StorageType" },
        "Iops": { "Fn::If": [
          "UseProvisionedIops",
          { "Ref": "Iops" },
          { "Ref": "AWS::NoValue" }
        ]},
        "MonitoringInterval": { "Fn::If": [ "EnhancedMonitoring", "60", "0" ]},
        "MonitoringRoleArn": { "Fn::If": [
          "EnhancedMonitoring",
          { "Fn::Join": ["", ["arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":role/rds-monitoring-role"]] },
          { "Ref": "AWS::NoValue" }
        ]},
        "PubliclyAccessible": { "Ref": "DBPubliclyAccessible" },
        "PreferredMaintenanceWindow": { "Ref": "PreferredMaintenanceWindow" },
        "PreferredBackupWindow": { "Ref": "PreferredBackupWindow" },
        "BackupRetentionPeriod": { "Ref":  "BackupRetentionPeriod" },
        "EnablePerformanceInsights": { "Ref": "EnablePerformanceInsights" },
        "PerformanceInsightsRetentionPeriod": { "Fn::If": [
          "EnablePerformanceInsights",
          7,
          { "Ref": "AWS::NoValue" }
        ]},
        "EnableCloudwatchLogsExports": [ "postgresql", "upgrade" ],
        "PerformanceInsightsKMSKeyId": { "Fn::If": [
          "EnablePerformanceInsights",
          "alias/aws/rds",
          { "Ref": "AWS::NoValue" }
        ]},
        "VPCSecurityGroups": [
          { "Fn::GetAtt": ["MyVPCSecurityGroup", "GroupId"] },
          { "Fn::If": [
            "DBInstanceVPCSecurityGroupId2Empty",
            { "Ref": "AWS::NoValue" },
            { "Ref": "DBInstanceVPCSecurityGroupId2" }
          ]},
          { "Fn::If": [
            "DBInstanceVPCSecurityGroupId3Empty",
            { "Ref": "AWS::NoValue" },
            { "Ref": "DBInstanceVPCSecurityGroupId3" }
          ]}
        ],
        "DBParameterGroupName": { "Ref": "DBParameterGroupName" },
        "Port": "5432"
      }
    },
    "MyDBReplicaInstance": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy" : "Retain",
      "Condition": "CreateReadOnlyReplica",
      "DependsOn": ["MyDBInstance"],
      "Properties": {
        "DBInstanceIdentifier": { "Fn::If":  [
          "DBReplicaInstanceIdentifierEmpty",
          { "Fn::Join": ["", [ { "Ref": "DBInstanceIdentifier" }, "-ror" ]]},
          { "Ref": "DBReplicaInstanceIdentifier" }
        ]},
        "SourceDBInstanceIdentifier": { "Ref": "DBInstanceIdentifier" },
        "AllowMajorVersionUpgrade": true,
        "AutoMinorVersionUpgrade": false,
        "MultiAZ": false,
        "AllocatedStorage": { "Fn::If": [
          "DBReplicaAllocatedStorageEmpty",
          { "Ref": "AllocatedStorage" },
          { "Ref": "DBReplicaAllocatedStorage" }
        ]},
        "MaxAllocatedStorage": { "Fn::If": [
          "DBReplicaMaxAllocatedStorageEmpty",
          { "Fn::If": [
            "MaxAllocatedStorageEmpty",
            { "Ref": "AWS::NoValue"},
            { "Ref": "MaxAllocatedStorage" }
          ]},
          { "Ref": "DBReplicaMaxAllocatedStorage" }
        ]},
        "DeletionProtection": { "Fn::If": [ "Ephemeral", false, true ] },
        "DBInstanceClass": { "Fn::If": [
          "DBReplicaInstanceClassEmpty",
          { "Ref": "DBInstanceClass" },
          { "Ref": "DBReplicaInstanceClass" }
        ]},
        "StorageType": { "Ref": "DBReplicaStorageType" },
        "Iops": { "Fn::If": [
          "DBReplicaUseProvisionedIops",
          { "Ref": "DBReplicaIops" },
          { "Ref": "AWS::NoValue" }
        ]},
        "PubliclyAccessible": { "Fn::If": [
          "DBReplicaPubliclyAccessibleEmpty",
          { "Ref": "DBPubliclyAccessible" },
          { "Ref": "DBReplicaPubliclyAccessible" }
        ]},
        "PreferredMaintenanceWindow": { "Ref": "PreferredMaintenanceWindow" },
        "BackupRetentionPeriod": 0,
        "EnablePerformanceInsights": false,
        "EnableCloudwatchLogsExports": [ "postgresql", "upgrade" ],
        "VPCSecurityGroups": [
          { "Fn::GetAtt": ["MyVPCSecurityGroup", "GroupId"] },
          { "Fn::If": [
            "DBReplicaInstanceVPCSecurityGroupId2Empty",
            { "Ref": "AWS::NoValue" },
            { "Ref": "DBReplicaInstanceVPCSecurityGroupId2" }
          ]}
        ],
        "DBParameterGroupName": { "Ref": "DBReplicaParameterGroupName" },
        "Port": "5432"
      }
    },
    "MyVPCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Fn::If": [
          "VpcIdIsDefault",
          { "Ref": "AWS::NoValue" },
          { "Ref": "VpcId" }
        ]},
        "GroupDescription": "Allow access to RDS instance from selected security groups",
        "SecurityGroupIngress": [
          { "Fn::If": [
            "DBInstanceIngressSourceSecurityGroupIdEmpty",
            { "Ref": "AWS::NoValue" },
            {
              "IpProtocol": "tcp",
              "FromPort": "5432",
              "ToPort": "5432",
              "SourceSecurityGroupId": { "Ref": "DBInstanceIngressSourceSecurityGroupId" }
            }
          ]},
          { "Fn::If": [
            "DBInstanceIngressSourceSecurityGroupId2Empty",
            { "Ref": "AWS::NoValue" },
            {
              "IpProtocol": "tcp",
              "FromPort": "5432",
              "ToPort": "5432",
              "SourceSecurityGroupId": { "Ref": "DBInstanceIngressSourceSecurityGroupId2" }
            }
          ]},
          { "Fn::If": [
            "DBInstanceIngressSourceSecurityGroupId3Empty",
            { "Ref": "AWS::NoValue" },
            {
              "IpProtocol": "tcp",
              "FromPort": "5432",
              "ToPort": "5432",
              "SourceSecurityGroupId": { "Ref": "DBInstanceIngressSourceSecurityGroupId3" }
            }
          ]},
          { "Fn::If": [
            "DBInstanceIngressSourceSecurityGroupId4Empty",
            { "Ref": "AWS::NoValue" },
            {
              "IpProtocol": "tcp",
              "FromPort": "5432",
              "ToPort": "5432",
              "SourceSecurityGroupId": { "Ref": "DBInstanceIngressSourceSecurityGroupId4" }
            }
          ]},
          { "Fn::If": [
            "DBInstanceIngressSourceSecurityGroupId5Empty",
            { "Ref": "AWS::NoValue" },
            {
              "IpProtocol": "tcp",
              "FromPort": "5432",
              "ToPort": "5432",
              "SourceSecurityGroupId": { "Ref": "DBInstanceIngressSourceSecurityGroupId5" }
            }
          ]}
        ]
      }
    },
    "MyDBInstanceHighCPUUtilizationAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "HighCPUUtilizationAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " High CPU Utilization"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBInstance" }
        }],
        "MetricName": "CPUUtilization",
        "Unit": "Percent",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "HighCPUUtilizationAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "HighCPUUtilizationAlarmThreshold" },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBInstanceLowIOBalanceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "LowIOBalanceAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " Low IO Balance"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "EvaluationPeriods": 1,
        "Threshold": { "Ref": "LowCPUCreditBalanceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching",
        "Metrics": [
          {
            "Id": "minIOBalance",
            "Label": "MIN(BurstBalance, EBSIOBalance%, EBSByteBalance%)",
            "Expression": "MIN(METRICS())",
            "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
            "ReturnData": true
          },
          {
            "Id": "burstBalance",
            "Label": "AVG(BurstBalance)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBInstance" }
                }],
                "MetricName": "BurstBalance"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          },
          {
            "Id": "ebsIOBalancePercent",
            "Label": "AVG(EBSIOBalance%)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBInstance" }
                }],
                "MetricName": "EBSIOBalance%"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          },
          {
            "Id": "ebsByteBalancePercent",
            "Label": "AVG(EBSByteBalance%)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBInstance" }
                }],
                "MetricName": "EBSByteBalance%"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          }
        ]
      }
    },
    "MyDBReplicaInstanceLowIOBalanceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ReplicaLowIOBalanceAlarmEnabled",
      "DependsOn": "MyDBReplicaInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBReplicaInstance" }, " Low IO Balance"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "EvaluationPeriods": 1,
        "Threshold": { "Ref": "LowCPUCreditBalanceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching",
        "Metrics": [
          {
            "Id": "minIOBalance",
            "Label": "MIN(BurstBalance, EBSIOBalance%, EBSByteBalance%)",
            "Expression": "MIN([burstBalance, ebsIOBalancePercent, ebsByteBalancePercent])",
            "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
            "ReturnData": true
          },
          {
            "Id": "burstBalance",
            "Label": "AVG(BurstBalance)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBReplicaInstance" }
                }],
                "MetricName": "BurstBalance"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          },
          {
            "Id": "ebsIOBalancePercent",
            "Label": "AVG(EBSIOBalance%)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBReplicaInstance" }
                }],
                "MetricName": "EBSIOBalance%"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          },
          {
            "Id": "ebsByteBalancePercent",
            "Label": "AVG(EBSByteBalance%)",
            "MetricStat": {
              "Metric": {
                "Namespace": "AWS/RDS",
                "Dimensions": [{
                  "Name": "DBInstanceIdentifier",
                  "Value": { "Ref": "MyDBReplicaInstance" }
                }],
                "MetricName": "EBSByteBalance%"
              },
              "Period": { "Ref": "LowIOBalanceAlarmPeriod" },
              "Stat": "Average",
              "Unit": "Percent"
            },
            "ReturnData": false
          }
        ]
      }
    },
    "MyDBInstanceLowCPUCreditBalanceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "LowCPUCreditBalanceAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " Low CPU Credit Balance"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBInstance" }
        }],
        "MetricName": "CPUCreditBalance",
        "Unit": "Count",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "LowCPUCreditBalanceAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "LowCPUCreditBalanceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBReplicaInstanceLowCPUCreditBalanceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ReplicaLowCPUCreditBalanceAlarmEnabled",
      "DependsOn": "MyDBReplicaInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBReplicaInstance" }, " Low CPU Credit Balance"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBReplicaInstance" }
        }],
        "MetricName": "CPUCreditBalance",
        "Unit": "Count",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "LowCPUCreditBalanceAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "LowCPUCreditBalanceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBReplicaInstanceHighReplicaLagAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "HighReplicaLagAlarmEnabled",
      "DependsOn": "MyDBReplicaInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBReplicaInstance" }, " High Replica Lag"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBReplicaInstance" }
        }],
        "MetricName": "ReplicaLag",
        "Unit": "Seconds",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "HighReplicaLagAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "HighReplicaLagAlarmThreshold" },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBInstanceLowFreeStorageSpaceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "LowFreeStorageSpaceAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " Low Free Storage Space"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBInstance" }
        }],
        "MetricName": "FreeStorageSpace",
        "Unit": "Bytes",
        "EvaluationPeriods": 10,
        "Period": { "Ref": "LowFreeStorageSpaceAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "LowFreeStorageSpaceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBReplicaInstanceLowFreeStorageSpaceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "ReplicaLowFreeStorageSpaceAlarmEnabled",
      "DependsOn": "MyDBReplicaInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBReplicaInstance" }, " Low Free Storage Space"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBReplicaInstance" }
        }],
        "MetricName": "FreeStorageSpace",
        "Unit": "Bytes",
        "EvaluationPeriods": 10,
        "Period": { "Ref": "LowFreeStorageSpaceAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "LowFreeStorageSpaceAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBInstanceHighDatabaseConnectionsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "HighDatabaseConnectionsAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " High Database Connections"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBInstance" }
        }],
        "MetricName": "DatabaseConnections",
        "Unit": "Count",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "HighDatabaseConnectionsAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "HighDatabaseConnectionsAlarmThreshold" },
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    },
    "MyDBInstanceLowDatabaseConnectionsAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Condition": "LowDatabaseConnectionsAlarmEnabled",
      "DependsOn": "MyDBInstance",
      "Properties": {
        "AlarmName": { "Fn::Join": ["", [{ "Ref": "MyDBInstance" }, " Low Database Connections"]] },
        "ActionsEnabled": true,
        "AlarmActions": { "Ref": "AlarmActions" },
        "InsufficientDataActions": { "Ref": "AlarmActions" },
        "OKActions": { "Ref": "AlarmActions" },
        "Namespace": "AWS/RDS",
        "Dimensions": [{
          "Name": "DBInstanceIdentifier",
          "Value": { "Ref": "MyDBInstance" }
        }],
        "MetricName": "DatabaseConnections",
        "Unit": "Count",
        "EvaluationPeriods": 1,
        "Period": { "Ref": "LowDatabaseConnectionsAlarmPeriod" },
        "Statistic": "Average",
        "Threshold": { "Ref": "LowDatabaseConnectionsAlarmThreshold" },
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "TreatMissingData": "breaching"
      }
    }
  },
  "Outputs": {
    "DBHostname": {
      "Description": "DNS name for the DB instance",
      "Value": { "Fn::GetAtt": ["MyDBInstance", "Endpoint.Address"] },
      "Export" : {
        "Name" : {
          "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "DBHostname" ] ]
        }
      }
    },
    "DBReplicaHostname": {
      "Description": "DNS name for the DB replica instance",
      "Value": { "Fn::GetAtt": ["MyDBReplicaInstance", "Endpoint.Address"] },
      "Export" : {
        "Name" : {
          "Fn::Join" : [ ":", [ { "Ref" : "AWS::StackName" }, "DBReplicaHostname" ] ]
        }
      },
      "Condition": "CreateReadOnlyReplica"
    }
  }
}
