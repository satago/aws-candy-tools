#!/usr/bin/env bash
set -e

SCRIPT_PATH=$( cd "$(dirname "$0")" ; pwd -P )

source "${SCRIPT_PATH}/_common-functions.bash"

STACKS_DIR=${SCRIPT_PATH}/../cloudformation-stacks

NAMESPACE=""

function parse_stack_options {
  while getopts ":n:" opt; do
    case $opt in
      n)
        NAMESPACE=${OPTARG}
        ;;
      \?)
        echo "Invalid option: -${OPTARG}" >&2
        exit 1
        ;;
      :)
        echo "Option -${OPTARG} requires an argument." >&2
        exit 1
        ;;
    esac
  done
}

parse_stack_options "${@}"
shift $((OPTIND-1))

CMD=$1
STACK=$2
STACK_NAMESPACE=$(extract_namespace_from_fqn "${STACK}")

if [[ -z "${NAMESPACE}" ]]; then
    NAMESPACE=${STACK_NAMESPACE}
elif [[ -n ${STACK_NAMESPACE} ]]; then
    if [[ ${STACK_NAMESPACE} != "${NAMESPACE}" ]]; then
      echo "Explicit (${NAMESPACE}) and implicit (${STACK_NAMESPACE}) namespaces must match"
      exit 1
    fi
fi

if [[ -z "${NAMESPACE}" ]]
then
  source "${SCRIPT_PATH}/set-aws-profile"
  STACK_NAME=${STACK}
else
  # shellcheck disable=SC1090
  source "${SCRIPT_PATH}/set-aws-profile-${NAMESPACE}"
  STACK_NAME=$(safe_fq_name "${NAMESPACE}/$(extract_name_from_fqn "${STACK}")")
fi

SELF_OPTS=""
if [[ -n ${NAMESPACE} ]]; then
  SELF_OPTS="-n ${NAMESPACE}"
fi

function template_path {
    # Search in user templates first
    local TEMPLATE_PATH=${SCRIPT_PATH}/../cloudformation-templates/$1-template.json
    if [[ ! -f ${TEMPLATE_PATH} ]]; then
        # If not found, try a built-in template
        TEMPLATE_PATH=${SCRIPT_PATH}/../build/tmp/aws-candy-tools/bundle/cloudformation-templates/$1-template.json
    fi
    echo "${TEMPLATE_PATH}"
}

function stack_policy_path {
    # Search in user folders first
    local STACK_POLICY_PATH=${STACKS_DIR}/${STACK}/stack-policy.json
    if [[ ! -f ${STACK_POLICY_PATH} ]]; then
        # If not found, try a built-in policy
        STACK_POLICY_PATH=${SCRIPT_PATH}/../build/tmp/aws-candy-tools/bundle/cloudformation-templates/$1-stack-policy.json
    fi
    echo "${STACK_POLICY_PATH}"
}

function template_name {
    # Take name of the template from parameters file,
    # each stack has exactly one parameters file
    find "${STACKS_DIR}/${STACK}" -name "*-parameters.json" \
        | sed 's/.*\/\(.*\)-parameters.json/\1/'
}

function bucket_name {
    echo "$(aws_account_id)-cloudformation"
}

function physical_resource_id_by_logical_id {
    aws cloudformation list-stack-resources \
            --stack-name "$1" \
            --query "StackResourceSummaries[?LogicalResourceId==\`$2\`].PhysicalResourceId" \
            --output text
}

function configure_bastion_ssh {
    if [[ -z "${NAMESPACE}" ]]
    then
      source "${SCRIPT_PATH}/set-bastion-ssh"
    else
      # shellcheck disable=SC1090
      source "${SCRIPT_PATH}/set-bastion-ssh-${NAMESPACE}"
    fi

    # Configure port, username and other settings via `~/.ssh/config`
    SSH_BASTION_HOST="ssh -t ${BASTION_HOST}"
    if [[ $(hostname) == "${BASTION_HOST}" ]]; then
      # No need to use self as jump host
      SSH_BASTION_HOST=
    fi

    SSH_INSTANCE_OPTIONS='-o StrictHostKeyChecking=no -o GlobalKnownHostsFile=/dev/null -o UserKnownHostsFile=/dev/null'
}

case "$CMD" in
        list)
          # shellcheck disable=SC2038
          find "${STACKS_DIR}" -name '*-parameters.json' \
              -exec realpath --relative-to "${STACKS_DIR}" {} \; \
              | xargs -n 1 dirname \
              | sort \
              | uniq
            ;;

        list-arns)
            ACCOUNT_ID=$(aws_account_id)
            INSTANCE_ROLE_ID=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyInstanceRole)
            echo "arn:aws:iam::${ACCOUNT_ID}:role/${INSTANCE_ROLE_ID}"
            ;;

        list-exports)
            aws cloudformation list-exports \
                --query 'Exports[*][Name, Value]' \
                --output table
            ;;

        create-cloudformation-bucket)
            BUCKET=$(bucket_name)
            aws s3 mb "s3://${BUCKET}"
            aws s3api put-bucket-versioning --bucket "${BUCKET}" \
                --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "${BUCKET}" \
                --server-side-encryption-configuration '{
                   "Rules": [
                           {
                               "ApplyServerSideEncryptionByDefault": {
                                   "SSEAlgorithm": "aws:kms",
                                   "KMSMasterKeyID": "alias/aws/s3"
                               },
                               "BucketKeyEnabled": true
                           }
                       ]
                   }'
            aws s3api put-public-access-block --bucket "${BUCKET}" \
                --public-access-block-configuration \
                  'BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true'
            ;;

        id)
            aws cloudformation describe-stacks --stack-name "${STACK_NAME}" \
                --query 'Stacks[0].StackId' --output text
            ;;

        create)
            TEMPLATE=$(template_name)
            aws s3 cp "$(template_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-template.json"
            STACK_POLICY_FILE=$(stack_policy_path "${TEMPLATE}")

            STACK_POLICY_OPTS=
            if [[ -f ${STACK_POLICY_FILE} ]]; then
              aws s3 cp "$(stack_policy_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-stack-policy.json"
              STACK_POLICY_OPTS="--stack-policy-url https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-stack-policy.json"
            fi

            # shellcheck disable=SC2086
            aws cloudformation create-stack \
                --stack-name "${STACK_NAME}" \
                --template-url "https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-template.json" \
                --parameters "file://${STACKS_DIR}/${STACK}/${TEMPLATE}-parameters.json" \
                ${STACK_POLICY_OPTS} \
                --disable-rollback \
                --capabilities CAPABILITY_IAM
            ;;

        set-stack-policy)
            TEMPLATE=$(template_name)
            STACK_POLICY_FILE=$(stack_policy_path "${TEMPLATE}")
            if [[ -f ${STACK_POLICY_FILE} ]]; then
              aws s3 cp "$(stack_policy_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-stack-policy.json"

              aws cloudformation set-stack-policy \
                  --stack-name "${STACK_NAME}" \
                  --stack-policy-url "https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-stack-policy.json"
            else
                echo "Policy file not found: ${STACK_POLICY_FILE}"
                exit 1
            fi
            ;;

        update)
            TEMPLATE=$(template_name)
            aws s3 cp "$(template_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-template.json"
            aws cloudformation update-stack \
                --stack-name "${STACK_NAME}" \
                --template-url "https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-template.json" \
                --parameters "file://${STACKS_DIR}/${STACK}/${TEMPLATE}-parameters.json" \
                --capabilities CAPABILITY_IAM
            ;;

        create-change-set)
            TEMPLATE=$(template_name)
            CHANGE_SET_NAME=change$(date -u +%Y%m%dT%H%M%S%Z)
            aws s3 cp "$(template_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-template.json"
            aws cloudformation create-change-set \
                --capabilities CAPABILITY_IAM \
                --stack-name "${STACK_NAME}" \
                --template-url "https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-template.json" \
                --parameters "file://${STACKS_DIR}/${STACK}/${TEMPLATE}-parameters.json" \
                --change-set-name "${CHANGE_SET_NAME}" \
            && echo "${CHANGE_SET_NAME}" \
            && echo "$0 ${SELF_OPTS} wait-change-set-create-complete ${STACK} ${CHANGE_SET_NAME}"
            ;;

        wait-change-set-create-complete)
            CHANGE_SET_NAME=$3
            aws cloudformation wait change-set-create-complete \
                --change-set-name "${CHANGE_SET_NAME}" \
            && echo "$0 ${SELF_OPTS} cloudformation describe-change-set ${STACK} ${CHANGE_SET_NAME}"
            ;;

        describe-change-set)
            CHANGE_SET_NAME=$3
            aws cloudformation describe-change-set \
                --stack-name "${STACK_NAME}" \
                --change-set-name "${CHANGE_SET_NAME}" \
            && echo "$0 ${SELF_OPTS} execute-change-set ${STACK} ${CHANGE_SET_NAME}"
            ;;

        execute-change-set)
            CHANGE_SET_NAME=$3
            aws cloudformation execute-change-set \
                --stack-name "${STACK_NAME}" \
                --change-set-name "${CHANGE_SET_NAME}" \
            && echo "$0 ${SELF_OPTS} wait ${STACK}"
            ;;

        wait)
            printf '%s Waiting for stack update\n' "$(date +%H:%M:%S)"

            PREV_STATUS=
            while true
            do
                STATUS=$($0 ${SELF_OPTS} status "${STACK}")
                STATUS_LINE="$(date +%H:%M:%S) ${STATUS}"

                if [[ -t 1 ]] && ( [[ -z ${PREV_STATUS} ]] || [[ ${PREV_STATUS} == "${STATUS}" ]] ); then
                    printf '\r%s' "${STATUS_LINE}"
                else
                    printf '\n%s' "${STATUS_LINE}"
                fi

                # Wait for one of the terminal statuses
                # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html
                if [[ ${STATUS} == 'CREATE_COMPLETE' ]] ||
                   [[ ${STATUS} == 'CREATE_FAILED' ]] ||
                   [[ ${STATUS} == 'DELETE_COMPLETE' ]] ||
                   [[ ${STATUS} == 'DELETE_FAILED' ]] ||
                   [[ ${STATUS} == 'ROLLBACK_COMPLETE' ]] ||
                   [[ ${STATUS} == 'ROLLBACK_FAILED' ]] ||
                   [[ ${STATUS} == 'UPDATE_COMPLETE' ]] ||
                   [[ ${STATUS} == 'UPDATE_ROLLBACK_COMPLETE' ]] ||
                   [[ ${STATUS} == 'UPDATE_ROLLBACK_FAILED' ]] ||
                   [[ ${STATUS} == 'CREATE_FAILED' ]]; then
                        exit 0
                fi

                PREV_STATUS=${STATUS}

                sleep "${WAIT_SLEEP_INTERVAL:-5}"
            done
            ;;

        status)
            aws cloudformation describe-stacks --stack-name "${STACK_NAME}" \
                --query 'Stacks[0].StackStatus' --output text
            ;;

        estimate-template-cost)
            TEMPLATE=$(template_name)
            aws s3 cp "$(template_path "${TEMPLATE}")" "s3://$(bucket_name)/${STACK_NAME}-template.json"
            aws cloudformation estimate-template-cost \
                --template-url "https://s3.amazonaws.com/$(bucket_name)/${STACK_NAME}-template.json" \
                --parameters "file://${STACKS_DIR}/${STACK}/${TEMPLATE}-parameters.json"
            ;;

        resources)
            aws cloudformation describe-stack-resources --stack-name "${STACK_NAME}" \
                --query 'StackResources[*].[Timestamp,ResourceStatus,PhysicalResourceId,LogicalResourceId]' \
                --output table
            ;;

        events)
            [[ -z $3 ]] && MAX_ITEMS=10 || MAX_ITEMS=$3

            aws cloudformation describe-stack-events --stack-name "${STACK_NAME}" \
                --query 'StackEvents[*].[Timestamp,ResourceStatus,LogicalResourceId,ResourceStatusReason]' \
                --output table \
                --max-items "${MAX_ITEMS}"
            ;;

        ec2-instances)
            STACK_ID=$($0 ${SELF_OPTS} id "${STACK}")
            ATTRS=$3
            OUTPUT="--output text"

            if [[ -z ${ATTRS} ]]; then
                ATTRS=".[InstanceId,PublicIpAddress,PublicDnsName,PrivateIpAddress,PrivateDnsName]"
            elif [[ ${ATTRS} == '*' ]]; then
                ATTRS=""
                OUTPUT=""
            else
                ATTRS=".[${ATTRS}]"
            fi

            # shellcheck disable=SC2086
            aws ec2 describe-instances \
                --query "Reservations[*].Instances[?Tags[?Value==\`${STACK_ID}\`]] \
                         | [*][?State.Name=='running']${ATTRS}" \
                ${OUTPUT}
            ;;

        get-min-size)
            ASG_NAME=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyASG)
            MIN_SIZE=$(aws autoscaling describe-auto-scaling-groups \
                --auto-scaling-group-name "${ASG_NAME}" \
                --query 'AutoScalingGroups[0].MinSize' \
                --output text)
            printf '%s' "${MIN_SIZE}"
            ;;

        get-desired-capacity)
            ASG_NAME=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyASG)
            CURRENT_CAPACITY=$(aws autoscaling describe-auto-scaling-groups \
                --auto-scaling-group-name "${ASG_NAME}" \
                --query 'AutoScalingGroups[0].DesiredCapacity' \
                --output text)
            printf '%s' "${CURRENT_CAPACITY}"
            ;;

        set-desired-capacity)
            DESIRED_CAPACITY=$3
            ASG_NAME=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyASG)

            aws autoscaling set-desired-capacity \
                --auto-scaling-group-name "${ASG_NAME}" \
                --desired-capacity "${DESIRED_CAPACITY}"
            ;;

        wait-for-elb-instances)
            # need to support both classic ELBs (pre 0.6.0) and ALBs (0.6.0+) so we do not end up with infinite loops during deployment
            ELB_NAME=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyELB)
            ALB_TARGET_GROUP_ARN=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyALBTargetGroup)

            if [[ -z ${ELB_NAME} ]] && [[ -z ${ALB_TARGET_GROUP_ARN} ]]; then
                printf '%s %s neither has ELB (Classic) nor ALB (ELBv2) defined\n' "$(date +%H:%M:%S)" "${STACK}"
                exit 1

            elif [[ -n ${ALB_TARGET_GROUP_ARN} ]]; then
                IN_SERVICE_COUNT_CHECK_DESTINATION="ALB (ELBv2) target group"
                function IN_SERVICE_COUNT_FUNCTION {
                  aws elbv2 describe-target-health \
                       --target-group-arn "${ALB_TARGET_GROUP_ARN}" \
                       --query "length(TargetHealthDescriptions[?TargetHealth.State=='healthy'].Target.Id)"
                }

            elif [[ -n ${ELB_NAME} ]]; then
                IN_SERVICE_COUNT_CHECK_DESTINATION="ELB (Classic)"
                function IN_SERVICE_COUNT_FUNCTION {
                    aws elb describe-instance-health \
                        --load-balancer-name "${ELB_NAME}" \
                        --query "length(InstanceStates[?State=='InService'].InstanceId)"
                }
            fi

            ASG_NAME=$(physical_resource_id_by_logical_id "${STACK_NAME}" MyASG)
            DESIRED_CAPACITY=$(aws autoscaling describe-auto-scaling-groups \
                --auto-scaling-group-name "${ASG_NAME}" \
                --query 'AutoScalingGroups[0].DesiredCapacity' \
                --output text)

            printf '%s Waiting for %s %s to have %s healthy instance(s) to match its ASG\n' \
                "$(date +%H:%M:%S)" "${STACK}" "${IN_SERVICE_COUNT_CHECK_DESTINATION}" "${DESIRED_CAPACITY}"

            PREV_STATUS=
            while true
            do
                set +e
                IN_SERVICE_COUNT=$(IN_SERVICE_COUNT_FUNCTION)
                set -e

                STATUS="${STACK} ${IN_SERVICE_COUNT_CHECK_DESTINATION} has ${IN_SERVICE_COUNT} healthy instance(s)"
                STATUS_LINE="$(date +%H:%M:%S) ${STATUS}"

                # TODO test & update deploy if works
                if [[ -t 1 ]] && [[ -z ${PREV_STATUS} || ${PREV_STATUS} == "${STATUS}" ]]; then
                    printf '\r%s' "${STATUS_LINE}"
                else
                    printf '\n%s' "${STATUS_LINE}"
                fi

              if [[ ${IN_SERVICE_COUNT} == "${DESIRED_CAPACITY}" ]]; then
                echo
                exit 0
              fi

              PREV_STATUS=${STATUS}

              sleep 1

            done
            ;;

        ssm)
            INSTANCE_ID=$($0 ${SELF_OPTS} ec2-instances "${STACK}" InstanceId | grep -v 'None' | head -n 1)

            aws ssm start-session --target "${INSTANCE_ID}"
          ;;


        ssh)
            # Take IP of the first available EC2 instance in the stack
            # TODO Support custom index and/or IP address
            # shellcheck disable=SC2086
            PRIVATE_IP=$($0 ${SELF_OPTS} ec2-instances "${STACK}" PrivateIpAddress | grep -v 'None' | head -n 1)

            configure_bastion_ssh

            # shellcheck disable=SC2086
            ${SSH_BASTION_HOST} \
                ssh -i ${SSH_INSTANCE_IDENTITY_FILE} ${SSH_INSTANCE_OPTIONS} ${SSH_INSTANCE_USER}@${PRIVATE_IP}
            ;;

        run)
            # shellcheck disable=SC2086
            PRIVATE_IPS=("$($0 ${SELF_OPTS} ec2-instances "${STACK}" PrivateIpAddress | grep -v 'None')")

            configure_bastion_ssh

            shift 2
            REMOTE_COMMAND="$*"

            for PRIVATE_IP in "${PRIVATE_IPS[@]}"; do
                # shellcheck disable=SC2145
                echo -e "*\n* About to run '$@' on ${PRIVATE_IP} (${STACK})...\n*"
                set +e

                # shellcheck disable=SC2086
                ${SSH_BASTION_HOST} \
                    ssh -i ${SSH_INSTANCE_IDENTITY_FILE} ${SSH_INSTANCE_OPTIONS} ${SSH_INSTANCE_USER}@${PRIVATE_IP} \
                        "'${REMOTE_COMMAND}'"
                echo -e "*\n* Exit code was: $?\n*"
                set -e
            done
            ;;

        *)
            echo $"Usage $0 [OPTIONS] <command> <args>

  OPTIONS:
    -n <namespace>

  $0 create <stack-name>
  $0 create-cloudformation-bucket
  $0 create-change-set <stack-name>
  $0 describe-change-set <stack-name> <change-set-name>
  $0 ec2-instances <stack-name> [InstanceId,PublicIpAddress,...|'*']
  $0 estimate-template-cost <stack-name>
  $0 events <stack-name> [max-events]
  $0 execute-change-set <stack-name> <change-set-name>
  $0 get-desired-capacity <stack-name>
  $0 get-min-size <stack-name>
  $0 id <stack-name>
  $0 list-arns <stack-name>
  $0 list-exports
  $0 list
  $0 resources <stack-name>
  $0 run <stack-name> <shell-command>
  $0 set-desired-capacity <stack-name> <desired-capacity>
  $0 set-stack-policy <stack-name>
  $0 ssh <stack-name>
  $0 ssm <stack-name>
  $0 status <stack-name>
  $0 update <stack-name>
  $0 wait <stack-name>
  $0 wait-change-set-create-complete <stack-name> <change-set-name>
  $0 wait-for-elb-instances <stack-name>"
            exit 1
            ;;
esac
